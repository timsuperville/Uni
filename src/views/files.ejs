<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Files</title>
    <link
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css"
      rel="stylesheet"
    />
  </head>
  <body>
    <div class="container mt-5">
      <h2 class="mb-4">Files on Server</h2>
      <p id="error" class="error text-danger"></p>
      <ul id="fileList" class="list-group"></ul>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const uploadForm = document.getElementById("uploadForm");
        const error = document.getElementById("error");
        const fileList = document.getElementById("fileList");

        async function fetchFiles() {
          fetch("api/files")
            .then((response) => response.json())
            .then((files) => {
              if (!Array.isArray(files)) {
                error.innerHTML = files.error;
                return;
              }
              if (files.length === 0) {
                fileList.innerHTML = "<li>There are no files on the drive.</li>";
                return;
              }
              fileList.innerHTML = "";
              files.forEach((file) => {
                const listItem = document.createElement("li");
                listItem.className =
                  "list-group-item d-flex justify-content-between align-items-center";

                const fileTitle = document.createElement("div");
                fileTitle.innerHTML = file;
                listItem.appendChild(fileTitle);
                // components
                const downloadButton = document.createElement("a");
                downloadButton.href = `api/files/download/${file}`;
                downloadButton.className = "btn btn-success btn-sm";
                downloadButton.innerHTML =
                  '<i class="bi bi-download"></i> Download';

                const deleteButton = document.createElement("button");
                deleteButton.className = "btn btn-danger btn-sm";
                deleteButton.innerHTML = '<i class="bi bi-trash"></i> Delete';
                deleteButton.onclick = async () => {
                  const response = await fetch(`api/files/delete/${file}`, {
                    method: "DELETE",
                  });
                  if (response.ok) {
                    fetchFiles();
                  } else {
                    alert("Failed to delete file.");
                  }
                };

                const playButton = document.createElement("button");
                playButton.className = "btn btn-primary btn-sm";
                playButton.innerHTML = '<i class="bi bi-play-fill"></i> Play';

                const stopButton = document.createElement("button");
                stopButton.className = "btn btn-danger btn-sm";
                stopButton.innerHTML = '<i class="bi bi-stop-fill"></i> Stop';
                stopButton.style.display = "none";

                playButton.onclick = () => {
                  const audio = new Audio(`api/files/download/${file}`);
                  audio.play();
                  playButton.style.display = "none";
                  stopButton.style.display = "inline-block";
                  audio.onended = () => {
                    playButton.style.display = "inline-block";
                    stopButton.style.display = "none";
                  };
                  stopButton.onclick = () => {
                    audio.pause();
                    audio.currentTime = 0;
                    playButton.style.display = "inline-block";
                    stopButton.style.display = "none";
                  };
                };

                if (file.endsWith(".mp3") || file.endsWith(".wav")) {
                  listItem.appendChild(playButton);
                  listItem.appendChild(stopButton);
                  listItem.appendChild(downloadButton);
                  // listItem.appendChild(deleteButton);
                  fileList.appendChild(listItem);
                }
              });
            });
        }

        // uploadForm.addEventListener("submit", async function (event) {
        //   event.preventDefault();
        //   const formData = new FormData(uploadForm);
        //   // get directory from the window path
        //   const directory = window.location.pathname;
        //   formData.append("directory", directory);
          
        //   fetch(`api/files/${directory}/upload`, {
        //     method: "POST",
        //     body: formData,
        //   })
        //     .then((response) => response.json())
        //     .then((result) => {
        //       if (result.success) {
        //         uploadForm.reset();
        //         fetchFiles();
        //       } else {
        //         alert(result.error);
        //       }
        //     });
        // });

        fetchFiles();
      });
    </script>
  </body>
</html>
